adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
training1 <- training[,grepl("PartString\\IL", names(training))]
head(training1)
training1
training1 <- training[,grep(IL,colnames(training))]
colnames(training)
training2 <- training[,grep("IL",colnames(training))]
head(training2)
caret?
''
preProcess(training2, method="pca", thres = 0.80)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingS <- training[,grep("IL",colnames(training))]
head(trainingS)
preProcess(training, method="glm")
modelfit <- train(type ~., data=trainingS,method = 'glm')
set.seed(1122)
modelFit <- train(type ~.,data=trainingS,method = "glm")
modelFit <- train(type ~.,data=trainingS, method="glm")
modelFit <- train(type ~.,data=trainingS, method="glm")
train?
/
?train
trainingS <- training[,grep("IL|diagnosis",colnames(training))]
head(trainingS)
modelFit <- train(diagnosis ~.,data=trainingS, method="glm")
set.seed(1122)
modelFit <- train(diagnosis ~.,data=trainingS, method="glm")
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
modelFit <- train(diagnosis ~.,data=trainingS, method="glm")
modelFit
modelFit2 <- train(diagnosis ~.,data=trainingS, preProcess = "pca", thres = .80, method="glm")
modelFit2 <- train(diagnosis ~.,data=trainingS, preProcess = "pca", method="glm")
modelFit2
ctrl <- trainControl(preProcOptions = list(thresh = 0.95))
modelFit2 <- train(diagnosis ~.,data=trainingS, preProcess = "pca", method="glm", trControl = ctrl)
ctrl <- trainControl(preProcOptions = list(thresh = 0.80))
modelFit2 <- train(diagnosis ~.,data=trainingS, preProcess = "pca", method="glm", trControl = ctrl)
modelfit2
modelFit2
modelFit <- train(diagnosis ~.,data=trainingS, method="glm")
modelFit
training2 <- training[,grep("IL",colnames(training))]
preProcess(training2, method="pca", thres = 0.90)
set.seed(1122)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
training2 <- training[,grep("IL",colnames(training))]
preProcess(training2, method="pca", thres = 0.90)
preProcess(training2, method="pca", thres = 0.90)
preProcess(training2, method="pca", thres = 0.90)
preProcess(training2, method="pca", thres = 0.80)
preProcess(training2, method="pca", thres = 0.90)
head(training)
View(training2)
training2$TRAIL_R3 <- null
training2$TRAIL_R3 <- NULL
preProcess(training2, method="pca", thres = 0.90)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
View(segmentationOriginal)
intrain <- createDataPartition(y=segmentationOriginal$Case, p=0.75, list=FALSE)
train <-segmentationOriginal[intrain]
test <- segmentationOrginal[-intrain]
test <- segmentationOriginal[-intrain]
train <-segmentationOriginal[intrain,]
test <- segmentationOriginal[-intrain,]
model <-train(Case ~., data = train, method = "CART")
model <-train(Case ~., data = train, method = "rpart")
model
predVal <-predict(model, test)
confusionMatrix(predVal, test$Case)
predVal
set.seed(125)
View(test)
TotalInTench <- c(23000)
FiberWidthCh1 <- c(10)
PerimStatusCh1 <-c(2)
test1<- data.frame(FiberWidthCh1, PerimStatuCh1, TotalInTench)
test1<- data.frame(FiberWidthCh1, PerimStatusCh1, TotalInTench)
test1
train <- segmentationOriginal[segmentation$Case == 'Train']
train <- segmentationOriginal[segmentationOriginal$Case == 'Train']
train <- subset(segmentationOriginal, Case == 'Train']
train <- subset(segmentationOriginal, Case == 'Train')
test <- subset(segmentationOriginal, Case == 'Test')
View(train)
View(test)
set.seed(125)
model <-train(Class ~., data = train, method = "rpart")
predict(model, test1)
predVal <- predict(model, test1)
predVal <- predict(model, test)
View(test)
plot(model$finalModel, uniform=TRUE, main="Classfication Tree")
text(model$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
install(rattle)
install.packages("rattle")
library("rattle", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
fancyRpartPlot(model$finalModel)
plot(model$finalModel, uniform=TRUE, main="Classfication Tree")
text(model$finalModel, use.n=TRUE, all=TRUE, cex=.8)
print(model$finalModel)
library(pgmm)
install.packages("pgmm")
data(olive)
library(pgmm)
data(olive)
View(olive)
olive = olive[,-1]
View(olive)
newdata = as.data.frame(t(colMeans(olive)))
model <- train(Area ~., data=olive, method ="rpart")
predVal <- predict(model,newdata)
model
plot(model$finalModel, uniform=TRUE, main="Classification Tree")
text(model$finalModel, use.n=TRUE, all=TRUE, cex=.8)
print(model$finalModel)
library(ElemStatLearn)
install.package(ElemStatLearn)
install.packages("ElemStatLearn")
data(SAheart)
library(ElemStatLearn)
data(SAheart)
head(SAheart)
View(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
model <- (chd ~., data=train, method = glm, family="binomial")
model <- train(chd ~., data=train, method = glm, family="binomial")
model <- train(chd ~., data=trainSA, method = glm, family="binomial")
model <- train(chd ~., data=trainSA, method = "glm", family="binomial")
model <- glm(chd~age+alcohol+obesity+tobacco+typea+ldl,family = binomial,data = trainSA)
missClass(trainSA,predict(modelFit,trainSA))
missClass(trainSA,predict(model,trainSA))
model <- glm(chd~age+alcohol+obesity+tobacco+typea+ldl,family = binomial(),data = trainSA)
model
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA,predict(model,trainSA))
model <- glm(chd~age+alcohol+obesity+tobacco+typea+ldl,family = binomial,data = trainSA)
missClass(trainSA,predict(model,trainSA))
missClass(trainSA$chm,predict(model,trainSA))
missClass(trainSA$chd,predict(model,trainSA))
missClass(testSA$chd,predict(model,testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
head(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
model <- train(y ~., data=vowel.train, method="rf")
modle
model
gbmImp <- varImp(model, scale = FALSE)
gbmIMp
gbmImp
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
view(vowel.train)
head(vowel.train)
head(vowel.test
)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
model <- train(y ~., data=vowel.train, method="rf")
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
model <- train(y ~., data=vowel.train, method="rf")
model1 <- train(y ~., data=vowel.train, method="gbm")
predVal <- predict(model, vowel.test)
predVal <- predict(model1, vowel.test)
predVal <- predict(model, vowel.test)
predVal1 <- predict(model1, vowel.test)
confusionMatrix(predVal, vowel.test$y)
confusionMatrix(predVal1, vowel.test$y)
str(predVal)
predVal
predVal['Accuracy']
predVal['Accuracy']-predVal1['Accuracy']
predVal1['Accuracy']
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
View(training)
model1 <- train(diagnosis ~., data=training, method="rf")
model1 <- train(diagnosis ~., data=training, method="gbm")
model1 <- train(diagnosis ~., data=training, method="rf")
model2 <- train(diagnosis ~., data=training, method="gbm")
model3 <- train(diagnosis ~., data=training, method="lda")
pred1 <- predict(model1, testing)
pred2 <- predict(model2, testing)
pred3 <- predict(model3, testing)
predDF <- data.frame(pred1, pred2, pred3, diagnosis=testing$diagnosis)
comMod <- train(diagnosis ~., method= "rf" , data=predDF)
View(predDF)
combPred <- predict(comMod, predDF)
combPred
confusionMatrix(comPred, predDF$diagnosis)
confusionMatrix(combPred, predDF$diagnosis)
confusionMatrix(pred1, testing$diagnosis)
confusionMatrix(pred2, testing$diagnosis)
confusionMatrix(pred3, testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
View(testing)
model1 <- train(CompressiveStrength ~., data=training, method="lasso")
?plot.enet
plot(model1, xvar=c("FineAggregate", "Cement", "BlastFurnaceSlag", "Water"))
plot(model1, xvar="FineAggregate")
plot(model1, xvar="Cement")
plot(model1, xvar="BlastFurnaceSlag")
plot(model1, xvar="FineAggregate")
plot(model1, xvar="Cement")
plot(model1, xvar="BlastFurnaceSlag")
plot(model1, xvar="Water")
plot.enet(model1$finalModel, "penalty")
plot.enet(model1$finalModel)
plot.enet(modelFit$finalModel, "penalty")
plot.enet(model1$finalModel, "penalty")
library(lubridate)
dat = read.csv("~/Desktop/gaData.csv")
View(dat)
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("forecast")
library("forecast", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?bats
View(testing)
View(training)
View(testing)
View(training)
model <- bats(training)
model <- bats(tstraining)
model <- bats(tstrain)
model
fcast <- forecast(model, level=95)
fcast
fcast <- forecast(model, level=.95)
fcast
fcast <- forecast(model)
accuracy(fcast, tstrain)
?forecast
fcast <- forecast(model, level=.95, h=235)
fcast
plot(fcast)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
install.packages("e1071")
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
View(training)
model <- train(CompressiveStrength ~., data=training method="svmRadial")
model <- train(CompressiveStrength ~., data=training, method="svmRadial")
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
model <- train(CompressiveStrength ~., data=training, method="svmRadial")
pred <-predict(model, testing)
pred
accuracy(pred, testing$CompressiveStrength)
accuracy(pred, testing$CompressiveStrength)
library("forecast", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
accuracy(pred, testing$CompressiveStrength)
source('~/cbjks.R')
library(lubridate)
dat = read.csv("gaData.csv")
dat = read.csv("~/Desktop/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("quantmod")
library("quantmod", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
fit <- bats(tstrain)''
fit <- bats(tstrain)
h <- dim(testing)[1]
fcast <- forecast(fit, level = 95, h = h)
fcast
accuracy(fcast, testing$visitsTumblr)
result <- c()
l <- length(fcast$lower)
for (i in 1:l){
x <- testing$visitsTumblr[i]
a <- fcast$lower[i] < x & x < fcast$upper[i]
result <- c(result, a)
}
sum(result)/l * 100
fcast <- forecast(fit, level = .95, h = h)
fcast
result <- c()
l <- length(fcast$lower)
for (i in 1:l){
x <- testing$visitsTumblr[i]
a <- fcast$lower[i] < x & x < fcast$upper[i]
result <- c(result, a)
}
sum(result)/l * 100
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
modelRF <- train(diagnosis ~., data=training, method="rf")
modelGBM <- train(diagnosis ~., data=training, method="gbm")
modelLDA <- train(diagnosis ~., data=training, method="lda")
predRF <- predict(modelRF, testing)
predGBM <- predict(modelGBM, testing)
predLDA <- predict(modelLDA, testing)
predDF$finalModel
predRF$finalModel
modelRF$finalModel
predDF <- data.frame(predRF, predGBM, predLDA, diagnosis=testing$diagnosis)
combModel <- train(diagnosis ~., data="predDF", method="rf")
combModel <- train(diagnosis ~., data=predDF, method="rf")
combPred <- predict(combModel, predDF)
confusionMatrix(predRF, testing$diagnosis)
confusionMatrix(predGBM, testing$diagnosis)
confusionMatrix(predLDA, testing$diagnosis)
confusionMatrix(combPred, testing$diagnosis)
confusionMatrix(combPred, predDF$diagnosis)
confusionMatrix(combPred, testing$diagnosis)
combPred <- predict(combModel, testing)
c1 <- confusionMatrix(predRF, testing$diagnosis)
c2 <- confusionMatrix(predGBM, testing$diagnosis)
c3 <- confusionMatrix(predLDA, testing$diagnosis)
c4 <- confusionMatrix(combPred, testing$diagnosis)
print(paste(c1$overall[1], c2$overall[1], c3$overall[1], c4$overall[1]))
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), slider = x(0, 2, step = 0.1))
manipulate(myPlot(s), x.s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot, s = slider(0, 2, step = 0.1))
install.packages("rCharts")
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)  ),
mainPanel(
plotOutput('newHist')
)
))
?setGeneric
show
showMethod()
showMethods()
install.packages("shiny")
install.packages("shinyapps")
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='kevinlessard', token='E6AEC4CB181FD8745391A63A041E9218', secret='8sJ5l6oUS9U8rNkhhdibYH7U8Fikrk0XbIhU/h2g')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
install.packages(c("htmltools", "nlme", "Rcpp", "rsconnect"))
install.packages(c("htmltools", "nlme", "Rcpp", "rsconnect"))
install.packages(c("htmltools", "nlme", "Rcpp", "rsconnect"))
install.packages(c("htmltools", "nlme", "Rcpp", "rsconnect"))
install.packages(c("htmltools", "nlme", "Rcpp", "rsconnect"))
install.packages(c("htmltools", "nlme", "Rcpp", "rsconnect"))
install.packages(c("htmltools", "nlme", "Rcpp", "rsconnect"))
library(tm)
shiny::runApp('DataScience/Capstone/final/Capstone')
shiny::runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
input <- "I love you from the bottom of my"
sw <- stopwords(kind = "en")
input <- removePunctuation(input)
input <- rev(unlist(strsplit(input," ")))
input <- setdiff(input,sw)
input <- input[grepl('[[:alpha:]]',input)]
input <- paste(input[2],input[1],sep = ' ')
searchTri<-grepl(paste0("^",input),Tab_trigram$Trigram)
load("~/DataScience/Capstone/final/ngram2.RData")
searchTri<-grepl(paste0("^",input),Tab_trigram$Trigram)
subTri <- droplevels(Tab_trigram[searchTri,])
View(Tab_trigram)
load("~/DataScience/Capstone/final/ngram2.RData")
View(Tab_onegram)
OneGramShort <- subset(Tab_onegram, freq > 1)
OneGramShort <- subset(Tab_onegram, Freq > 1)
View(OneGramShort)
Tab_onegram <- subset(Tab_onegram, freq > 1)
Tab_onegram <- subset(Tab_onegram, Freq > 1)
Tab_bigram <- subset(Tab_bigram, Freq > 1)
Tab_trigram <- subset(Tab_trigram, Freq > 1)
rm(OneGramShort)
save.image("~/DataScience/Capstone/final/ngram2.RData")
runApp('DataScience/Capstone/final')
View(Tab_trigram)
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
shiny::runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
dataInput <- reactive({predict0(input$entry,Tab_onegram,Tab_bigram,Tab_trigram)
})
dataInput()
dataInput <- reactive({predict0(good,Tab_onegram,Tab_bigram,Tab_trigram)})
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
runApp('DataScience/Capstone/final')
load("~/DataScience/Capstone/final/finalv2.RData")
Bigram <- NGramTokenizer(corp1, Weka_control(min = 2, max = 2,delimiters = " \\r\\n\\t.,;:\"()?!"))
options( java.parameters = "-Xmx4g" )
library(RWeka)
library(qdap)
library(SnowballC)
library(tm)
Bigram <- NGramTokenizer(corp1, Weka_control(min = 2, max = 2,delimiters = " \\r\\n\\t.,;:\"()?!"))
Tab_bigram <- data.frame(table(Bigram))
Tab_bigram <- subset(Tab_bigram, Freq > 1)
BigramGrp <- Tab_bigram[order(Tab_bigram$Freq,decreasing = TRUE),]
rm(Bigram)
rm(Tab_bigram)
save.image("~/DataScience/Capstone/final/finalv2.RData")
source("~/Repositories/gitABC/hello-git.R")
source("~/Repositories/gitABC/hello-git.R")
print(b)
print(a)
library(cluster)
setwd("~/Repositories/st2195_assignment_1")
a <- c(1,2,3,4,5,6,7,8,9,10)
print(a)
a <- c(1,2,3,4,5,6,7,8,9,10)
a
